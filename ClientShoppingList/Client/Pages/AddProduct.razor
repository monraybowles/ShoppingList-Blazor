@page "/addproduct"
@using ClientShoppingList.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h2>Add Product</h2>
<div  class="row"  >
    <div class="col-md-6">
        <div class="form-group">
            <label for="ProductName"> ProductName *</label>
            <input form="ProductName" class="form-control" @bind="@products.ProductName" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="Description"> Description *</label>
            <input form="Description" class="form-control" @bind="@products.Description" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="Price"> Price *</label>
            <input form="Price" class="form-control" @bind="@products.Price" />
        </div>
    </div>

      <div class="col-md-6">
        
        <div class="form-group">
           <label for="Upload Image"> Upload Image *</label>
            <InputFile class="form-control" id="img"  OnChange="@OnInputFileChange" />
        </div>
      </div>
     <div class="row mb-6">
         
             <div class="form-group">
             
             <label for="img" ></label>
               
               <div>
                <img src="@image" height="200px" width="200px">
                </div>
              
            </div>
        </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-primary" @onclick="@Save" value="Save" />
            <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
        </div>
    </div>
</div>
@code
{
    ProductsViewModel products = new ProductsViewModel();
    byte[] _fileBytes = null;
    byte[] buffers = null;
    string image = "";

    protected override async Task OnInitializedAsync()
    {

        if (products.Img == null)
        {

        }
        else
        {
            string data = Convert.ToBase64String(products.Img);
            image = string.Format("data:image/jpeg;base64,{0}", data);
        }
   



    }
    protected async Task Save()
    {
         products.Img = buffers;

        var response = await Http.PostAsJsonAsync("api/Products/", @products);
        ProductsViewModel productResponse = await response.Content.ReadFromJsonAsync<ProductsViewModel>();
        if (productResponse?.Id > 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
            NavigationManager.NavigateTo("productlist");
        }

    }
    void Cancel()
    {
        NavigationManager.NavigateTo("productlist");
    }


    string imgSrc = "";



   // private readonly IWebHostEnviroment environment;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;

       // string root = @"wwwroot\Images";
       // string folder = "Images";
       // Guid id = new Guid();


       // string path = System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "wwwroot");

       //// var path = $"{Directory.GetCurrentDirectory()}{@"wwwroot\Images"}";//Path.Combine(root, folder, imgFile.Name);
       // //var path = Path.Combine(root, folder, imgFile.Name);
       // using var fileSream = new FileStream(path, FileMode.Create);

       //// await file
        
       // // var memoryStream = new MemoryStream();

       // await imgFile.OpenReadStream().CopyToAsync(fileSream);

       // //using (FileStream fileStream = new FileStream(path,FileMode.Create,FileAccess.Write))
       // //{
       // //    memoryStream.WriteTo(fileStream);
       // //}

        buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        string fileName = imgFile.Name;
        products.Img = buffers;//$"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

        string data = Convert.ToBase64String(products.Img);
        image = string.Format("data:image/jpeg;base64,{0}", data);

    }


    //async void HandleFileSelection(InputFileChangeEventArgs eventArgs)
    //{


    //    foreach (var file in eventArgs.GetMultipleFiles(1))
    //    {
    //        try
    //        {



    //            using (var ms = new MemoryStream())
    //            {

    //                await file.OpenReadStream().CopyToAsync(ms);
    //                _fileBytes = ms.ToArray();

    //                products.Img = _fileBytes;

    //            }


    //        }
    //        catch (Exception ex)
    //        {
    //            ex.ToString();
    //        }
    //    }
    //}
    public byte[] getImage(string sBase64String)     
     {
            byte[] bytes = null;
            if(!string.IsNullOrEmpty(sBase64String))
            {
                bytes = Convert.FromBase64String(sBase64String);
            }
            return bytes;
     }
      
        
       
   


    


}
