@page "/addperson"
@using ClientShoppingList.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h2>Add Product</h2>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="ProductName"> ProductName *</label>
            <input form="ProductName" class="form-control" @bind="@product.ProductName" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="Description"> Description *</label>
            <input form="Description" class="form-control" @bind="@product.Description" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="Price"> Price *</label>
            <input form="Price" class="form-control" @bind="@product.Price" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
           <label for="Upload Image"> Upload Image *</label>
            <InputFile OnChange="OnChooseFile" @bind="@product.Img"  class="form-control" />     
        </div>
   </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-primary" @onclick="@Save" value="Save" />
            <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
        </div>
    </div>
</div>
@code {
    ProductsViewModel product = new ProductsViewModel();
    protected override async Task OnInitializedAsync()
    {

    }
    protected async Task Save()
    {
        var response = await Http.PostAsJsonAsync("api/Products", product);
        ProductsViewModel personResponse = await response.Content.ReadFromJsonAsync<ProductsViewModel>();
        if (personResponse?.Id > 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
            NavigationManager.NavigateTo("personlist");
        }

    }
    void Cancel()
    {
        NavigationManager.NavigateTo("personlist");
    }

    private IBrowserFile? _selectedFile = null;

		public void OnChooseFile(InputFileChangeEventArgs e)
		{
            // Get the selected file
            _selectedFile = e.File;
		}

		private long _uploaded = 0;
		private double _percentage = 0;
		// The method that will submit the file to the server
		public async Task SubmitFileAsync()
		{
			// Create a multipart form data content which will hold the key value of the file that must be of type StreamContent
			var content = new MultipartFormDataContent();

			if (_selectedFile == null)
				return;

			using (var fileStream = _selectedFile.OpenReadStream(5000000))
			{
                // and the 40096 which are 40KB per packet and the third argument which as a callback for the OnProgress event (u, p) are u = Uploaded bytes and P is the percentage
                var streamContent = new ProgressiveStreamContent(fileStream, 40096, (u, p) =>
                {
                    // Set the values of the _uploaded & _percentage fields to the value provided from the event
                    _uploaded = u;
                    _percentage = p;

                    // Call StateHasChanged() to notify the component about this change to re-render the UI
                    StateHasChanged();
                });

                // Add the streamContent with the name to the FormContent variable
                content.Add(streamContent, "file", _selectedFile.Name);

                // Submit the request
               
            }
          
		}
	


}
